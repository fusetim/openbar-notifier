/*
 * OpenAPI - Bar
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Item {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "prices")]
    pub prices: Box<models::ItemPrices>,
    #[serde(rename = "display_prices", skip_serializing_if = "Option::is_none")]
    pub display_prices: Option<Box<models::ItemPrices>>,
    #[serde(rename = "display_price", skip_serializing_if = "Option::is_none")]
    pub display_price: Option<i32>,
    #[serde(rename = "promotion", skip_serializing_if = "Option::is_none")]
    pub promotion: Option<i32>,
    #[serde(rename = "promotion_ends_at", skip_serializing_if = "Option::is_none")]
    pub promotion_ends_at: Option<i32>,
    #[serde(rename = "amount_left")]
    pub amount_left: i32,
    #[serde(rename = "optimal_amount")]
    pub optimal_amount: i32,
    #[serde(rename = "buy_limit", skip_serializing_if = "Option::is_none")]
    pub buy_limit: Option<i32>,
    #[serde(rename = "category_id")]
    pub category_id: uuid::Uuid,
    /// Name of the current item
    #[serde(rename = "name")]
    pub name: String,
    /// Link to picture of the current item
    #[serde(rename = "picture_uri")]
    pub picture_uri: String,
    #[serde(rename = "available_from", skip_serializing_if = "Option::is_none")]
    pub available_from: Option<i32>,
    #[serde(rename = "available_until", skip_serializing_if = "Option::is_none")]
    pub available_until: Option<i32>,
    #[serde(rename = "is_menu")]
    pub is_menu: bool,
    #[serde(rename = "menu_items", skip_serializing_if = "Option::is_none")]
    pub menu_items: Option<Vec<models::MenuItem>>,
    #[serde(rename = "menu_categories", skip_serializing_if = "Option::is_none")]
    pub menu_categories: Option<Vec<models::MenuCategory>>,
    #[serde(rename = "state")]
    pub state: models::ItemState,
    #[serde(rename = "last_tva", skip_serializing_if = "Option::is_none")]
    pub last_tva: Option<i32>,
    #[serde(rename = "deleted_at", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<i32>,
    #[serde(rename = "deleted_by", skip_serializing_if = "Option::is_none")]
    pub deleted_by: Option<uuid::Uuid>,
    #[serde(rename = "amount_per_bundle", skip_serializing_if = "Option::is_none")]
    pub amount_per_bundle: Option<i32>,
    /// Referal code of the product in the Drive
    #[serde(rename = "ref_bundle", skip_serializing_if = "Option::is_none")]
    pub ref_bundle: Option<String>,
    #[serde(rename = "fournisseur", skip_serializing_if = "Option::is_none")]
    pub fournisseur: Option<models::Fournisseur>,
}

impl Item {
    pub fn new(id: uuid::Uuid, prices: models::ItemPrices, amount_left: i32, optimal_amount: i32, category_id: uuid::Uuid, name: String, picture_uri: String, is_menu: bool, state: models::ItemState) -> Item {
        Item {
            id,
            prices: Box::new(prices),
            display_prices: None,
            display_price: None,
            promotion: None,
            promotion_ends_at: None,
            amount_left,
            optimal_amount,
            buy_limit: None,
            category_id,
            name,
            picture_uri,
            available_from: None,
            available_until: None,
            is_menu,
            menu_items: None,
            menu_categories: None,
            state,
            last_tva: None,
            deleted_at: None,
            deleted_by: None,
            amount_per_bundle: None,
            ref_bundle: None,
            fournisseur: None,
        }
    }
}

