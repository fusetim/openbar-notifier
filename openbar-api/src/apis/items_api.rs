/*
 * OpenAPI - Bar
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait ItemsApi: Send + Sync {

    /// GET /categories/{category_id}/items
    ///
    /// Get all items of a category
    async fn get_category_items<'category_id, 'page, 'limit, 'state>(&self, category_id: &str, page: Option<i64>, limit: Option<i64>, state: Option<&'state str>) -> Result<models::GetCategoryItems200Response, Error<GetCategoryItemsError>>;

    /// GET /categories/{category_id}/items/{item_id}/picture
    ///
    /// Get an item picture
    async fn get_item_picture<'category_id, 'item_id>(&self, category_id: &str, item_id: &str) -> Result<std::path::PathBuf, Error<GetItemPictureError>>;
}

pub struct ItemsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl ItemsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}



#[async_trait]
impl ItemsApi for ItemsApiClient {
    /// Get all items of a category
    async fn get_category_items<'category_id, 'page, 'limit, 'state>(&self, category_id: &str, page: Option<i64>, limit: Option<i64>, state: Option<&'state str>) -> Result<models::GetCategoryItems200Response, Error<GetCategoryItemsError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/categories/{category_id}/items", local_var_configuration.base_path, category_id=crate::apis::urlencode(category_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &param_value.to_string())]);
        }
        if let Some(ref param_value) = limit {
            local_var_req_builder = local_var_req_builder.query(&[("limit", &param_value.to_string())]);
        }
        if let Some(ref param_value) = state {
            local_var_req_builder = local_var_req_builder.query(&[("state", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetCategoryItems200Response`"))),
                ContentType::Unsupported(local_var_unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{local_var_unknown_type}` content type response that cannot be converted to `models::GetCategoryItems200Response`")))),
            }
        } else {
            let local_var_entity: Option<GetCategoryItemsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get an item picture
    async fn get_item_picture<'category_id, 'item_id>(&self, category_id: &str, item_id: &str) -> Result<std::path::PathBuf, Error<GetItemPictureError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/categories/{category_id}/items/{item_id}/picture", local_var_configuration.base_path, category_id=crate::apis::urlencode(category_id), item_id=crate::apis::urlencode(item_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `std::path::PathBuf`"))),
                ContentType::Unsupported(local_var_unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{local_var_unknown_type}` content type response that cannot be converted to `std::path::PathBuf`")))),
            }
        } else {
            let local_var_entity: Option<GetItemPictureError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`get_category_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCategoryItemsError {
    Status404(models::HttpError),
    Status500(models::HttpError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_item_picture`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemPictureError {
    Status404(models::HttpError),
    Status500(models::HttpError),
    UnknownValue(serde_json::Value),
}

